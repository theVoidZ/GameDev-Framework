#ifndef OBJECT_H
#define OBJECT_H

// c++-includes
#include <string>

// sfml-includes
#include <SFML/System/Time.hpp>

// qt-includes
#include <QObject>

// user-includes
#include "kernel/gameinfo.h"
#include "kernel/scene.h"

namespace gdf {
namespace kernel {

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Base class for most objects of the Framework.
///
/// The Object class holds minor and common properties of objects such as the object name and the instance.
///
/// It is basically used to achieve polymorphism.
///
/// Object inherits from QObject for the one and only reason, to be part of the Qt meta-object-system.
///
/// \note The qt-moc will be futher replaced by pure c++ mechanism.
///
/// QT: class Object : public QObject
class Object : public QObject
{
    Q_OBJECT
    public:

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default constructor
        ///
        Object();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default destructor
        ///
        virtual ~Object();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief The name of the object.
        ///
        std::string name_ = "";
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Unique id of the object.
        ///
        /// The instance id is unique for every object.
        ///
        /// \note Value attribution of instance id follows the 'One Definition Rule' concept, ( based on memory
        /// adresses ), which garantees the unicity of the values generated.
        ///
        /// \attention If the allocated memory of an object X is freed, and the same memory address is used to
        /// reallocate a second object Y. In this case, X and Y would have the same instance id. \n
        /// However, X and Y does not exist simultaneously.
        ///
        unsigned long instance_id_ = 0;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Setter
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Change the name of the object.
        ///
        /// \param name New name of the object ( accept empty names ? )
        ///
        /// \sa name
        ///
        void set_name(std::string name);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Getter
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Retreive the name of the object
        ///
        /// \return Object's name
        /// \sa set_name
        ///
        std::string name() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Retreive the id of the object
        ///
        /// \return Object's id
        ///
        unsigned long instance_Id() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

};

}}

#endif // OBJECT_H
