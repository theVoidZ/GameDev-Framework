#include "object.h"

namespace gdf  {
namespace kernel  {


//////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned long Object::instance_id_counter = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Object::Object()
{
    // OBSOLETE: Generates the id based on the current object's address.
    instance_id_ = instance_id_counter++;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Object::Object(const Object &obj){
    name_ = obj.name();
    instance_id_ = instance_id_counter++;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Object::~Object(){
	// TODO: Create corresponding destructor
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Object::verbose() const{
	std::cout << "Object: instance id:" << instance_id_ << ", name:" << name_ << std::endl;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Object::set_name(std::string name){
    this->name_ = name;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Object::set_instance_id(unsigned long inst_id){
    this->instance_id_ = inst_id;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string Object::name() const{
    return name_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned long Object::instance_id() const{
    return instance_id_;
}

}}
