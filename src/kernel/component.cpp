#include "component.h"

#include "gameobject.h"

namespace gdf {
namespace kernel{

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Component::Component()
{
    //! WARNING: SHOULD NEVER CALL game_object in any CONSTRUCTION OF COMPONENT AS IT IS NOT YET CREATED AT THAT TIME.
    //! NOTE: SHOULD NEVER CALL game_object in any CONSTRUCTION OF COMPONENT AS IT IS NOT YET CREATED AT THAT TIME.
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
Component::~Component(){
//    std::cout << "~Component.begin (" << classname_ << ")" <<  std::endl;
    // Higher dtor are called first.
    // To trigger specific events

    // Then call the destructor
    // STEP 2 ( Recursive call on children component )
    for( auto it = children_components_.begin(); it != children_components_.end(); ){
        (*it).reset();

        it++;
    }

    std::cout << BOLD << FGREEN << "\t" << classname_ << " is destroyed" << RESET << std::endl;

    std::list< tracker_ptr<Component> >::iterator it2;
    for( it2 = host_object_->all_items.begin(); it2 != host_object_->all_items.end(); it2++ ){
        //Erase from ComponentContainer::all_items
        if( (*it2).get() == this ){
            host_object_->all_items.erase(it2);
            break;
        }
    }

//    std::cout << "~Component.end (" << classname_ << ")" <<  std::endl;

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::verbose(){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void Component::on_gui(){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::init(){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::post_init(){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::update(sf::Time dt){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::fixed_update(sf::Time dt){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::late_update(sf::Time dt){

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::draw(sf::RenderTarget &target, sf::RenderStates states) const{

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
void Component::set_host_object(ComponentContainer* ho){
    host_object_ = ho;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Component::enabled() const{
    return enabled_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
gdf::kernel::GameObject* Component::game_object() const{
    /// WARNING: Use dynamic cast instead.
    return static_cast<GameObject*>(host_object_);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::list< tracker_ptr<Component> >& Component::children_components(){
    return children_components_;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
std::list< tracker_ptr<Component> >& Component::parents_components(){
    return parents_components_;
}

}}
