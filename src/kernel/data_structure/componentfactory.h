#ifndef COMPONENTFACTORY_H
#define COMPONENTFACTORY_H

#include <string>
#include <map>
#include <ostream>

namespace gdf {
namespace kernel {

class Component;

class ComponentFactory
{
    public:
    template< typename T >
    static Component* generic_ctor(){
        return new T;
    }

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default constructor
        ///
        ComponentFactory();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default destructor
        ///
        ~ComponentFactory();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///
        void init();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////


    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Make a listing of all elements of the Factory (list).
        ///
        void verbose() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Register a Component in the list by its Name ad its Contructor
        /// TODO: Implement 'operator<<' to push items
        ///
        /// \param component_name Name of the Class to register
        /// \param ctor Pointer to function ( to Class Construction )
        ///
        void register_component( std::string component_name , Component* (*ctor)(void) );
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Retrieve the Construtor stored for a given Class.
        ///
        /// \param component_name Name of the Class to retrieve the Contructor for.
        /// \return Invoke the binded method ( if a valid constructor, returns an instance of Component, else
        /// return \b nullptr )
        ///
        Component* get( std::string component_name ) const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    private:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Container holding the couples <Name, Ctor>
        ///
        std::map< std::string, Component* (*)(void)> factory_map;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

};


}}

#endif // COMPONENTFACTORY_H
