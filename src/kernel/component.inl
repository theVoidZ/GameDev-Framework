namespace gdf {
namespace kernel{

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponent() const{
    return game_object()->getComponent<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponents() const{
    return game_object()->getComponents<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponentOfType() const{
    return game_object()->getComponentOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponentsOfType() const{
    return game_object()->getComponentsOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponentInParent() const{
    return game_object()->getComponentInParent<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponentsInParent() const{
    return game_object()->getComponentsInParent<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponentInParentOfType() const{
    return game_object()->getComponentInParentOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponentsInParentOfType() const{
    return game_object()->getComponentsInParentOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponentInChildren() const{
    return game_object()->getComponentInChildren<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponentsInChildren() const{
    return game_object()->getComponentsInChildren<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::getComponentInChildrenOfType() const{
    return game_object()->getComponentInChildrenOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
std::list<T*> Component::getComponentsInChildrenOfType() const{
    return game_object()->getComponentsInChildrenOfType<T>();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
template< typename T >
T* Component::host_object(){
    static_assert( !std::is_base_of<HierarchicalContainer, T>() , "T must inherit from HierarchicalContainer" );
    return dynamic_cast<T*>(host_object_);
}

}}
