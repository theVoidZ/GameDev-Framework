#ifndef COMPONENT_H
#define COMPONENT_H

// c++-includes
#include <list>

// sfml-includes

// qt-includes

// user-includes
#include "kernel/object.h"

namespace gdf {
namespace kernel{

class ComponentContainer;

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief The Component class is used to define a specific logic and add it to an object (\a ComponentContainer)
///
/// \note to be continued
class Component : public Object
{
    public:
        friend class ComponentContainer;

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default constructor
        ///
        Component();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default destructor
        ~Component();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Displays a detailed information about the component
        ///
        virtual void verbose();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Initializes the Component
        ///
        virtual void init();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Update the component
        /// \param dt The elapsed amount of time between two calls
        ///
        virtual void update(sf::Time dt);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void fixed_update(sf::Time dt);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void late_update(sf::Time dt);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////


        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void draw(sf::RenderTarget &target, sf::RenderStates states) const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Setters
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        void set_host_object( ComponentContainer* ho);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Getters
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        gdf::kernel::GameObject* game_object() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Retrieves a polymorphic type of the host object of type T
        ///
        /// \return A T casted type of host_object
        template< typename T >
        T* host_object();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Host object is a ComponentContainer the includes the Component
        ///
        ComponentContainer* host_object_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief List of children components that depends on this component
        ///
        std::list< Component* > children_components_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief List of parent components this component depends on
        ///
        std::list< Component* > parents_components_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

};

}}

#include "./component.inl"

#endif // COMPONENT_H
