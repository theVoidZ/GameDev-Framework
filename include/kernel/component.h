#ifndef COMPONENT_H
#define COMPONENT_H

// c++-includes
#include <list>

// sfml-includes

// qt-includes

// user-includes
#include "kernel/gameobject.h"


namespace gdf {
namespace kernel{

class HierarchicalContainer;

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief The Component class is used to define a specific logic and add it to an object (\a HierarchicalContainer)
///
/// \note to be continued
class Component : public Object
{
    Q_OBJECT
    public:
        friend class HierarchicalContainer;

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default constructor
        ///
        Component();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default destructor
        ~Component();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Displays a detailed information about the component
        ///
        virtual void verbose();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Initializes the Component
        ///
        virtual void init();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Update the component
        /// \param dt The elapsed amount of time between two calls
        ///
        virtual void update(sf::Time dt);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////


    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponent
        ///
        template< typename T >
        T* getComponent() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponents
        ///
        template< typename T >
        std::list<T*> getComponents() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentOfType
        ///
        template< typename T >
        T* getComponentOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentsOfType
        ///
        template< typename T >
        std::list<T*> getComponentsOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentInParent
        ///
        template< typename T >
        T* getComponentInParent() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentsInParent
        ///
        template< typename T >
        std::list<T*> getComponentsInParent() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentInParentOfType
        ///
        template< typename T >
        T* getComponentInParentOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentsInParentOfType
        ///
        template< typename T >
        std::list<T*> getComponentsInParentOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentInChildren
        ///
        template< typename T >
        T* getComponentInChildren() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentsInChildren
        ///
        template< typename T >
        std::list<T*> getComponentsInChildren() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentInChildrenOfType
        ///
        template< typename T >
        T* getComponentInChildrenOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::getComponentsInChildrenOfType
        ///
        template< typename T >
        std::list<T*> getComponentsInChildrenOfType() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::send_message
        ///
        void send_message( const char* method_name, std::vector< QVariant > args ) const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::send_message_upwards
        ///
        void send_message_upwards(const char* method_name, std::vector<QVariant> args ) const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \sa GameObject::broadcast_message
        ///
        void broadcast_message( const char* method_name, std::vector< QVariant > args ) const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Setters
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        void set_host_object( HierarchicalContainer* ho);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    public:
        //Getters
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        gdf::kernel::GameObject* game_object() const;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Retrieves a polymorphic type of the host object of type T
        ///
        /// \return A T casted type of host_object
        template< typename T >
        T* host_object();
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected:
        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Host object is a HierarchicalContainer the includes the Component
        ///
        HierarchicalContainer* host_object_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief List of children components that depends on this component
        ///
        std::list< Component* > children_components_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief List of parent components this component depends on
        ///
        std::list< Component* > parents_components_;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

};

}}

#include "./component.inl"

#endif // COMPONENT_H
